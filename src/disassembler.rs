pub use crate::constants::*;
pub use crate::cpu::common::*;
pub use crate::cpu::Cpu;

pub const HEADER: &str =
    "CYCLE  PC       Ins  S  l,   h,   sp      SZ0A0P1C  data(l,h)  B    Halt? : Command";

pub fn disassemble(cpu: &Cpu, current_opcode: (u8, u8, u8), next_opcode: (u8, u8, u8)) -> String {
    if cpu.cycle_count == 1 || (cpu.cycle_count % 25 == 0) {
        println!("{}", HEADER);
    }

    format!("{:#06X}:{:#06X}   {:#04X} 3  {:#04X},{:#04X},{:#06X}  {:08b}  {:#04X},{:#04X}  {:#04X} {} : {} (Next: {}({:2X}),{:02X},{:02X})",
        cpu.cycle_count, cpu.pc, cpu.current_opcode.0, cpu.l, cpu.h, cpu.sp, cpu.flags, current_opcode.1, cpu.current_opcode.2, cpu.b, cpu.nop, get_opcode_text(cpu.current_opcode), get_opcode_text(next_opcode), next_opcode.0, next_opcode.1, next_opcode.2)
}

// Really this just prints stuff to the standard output so we can view details on what is
// happening. Later, it will probably print out more of the registers, etc.
#[allow(clippy::too_many_lines)]
pub fn get_opcode_text(op: (u8, u8, u8)) -> &'static str {
    // TODO: Get the missing opcodes in here..

    match op.0 {
        0x00 => OP_NOP,
        0x01 => OP_LXI_B,
        0x03 => OP_INX_B,
        0x04 => OP_INR_B,
        0x05 => OP_DCR_B,
        0x06 => OP_MVI_B,
        0x09 => OP_DAD_B,
        0x0B => OP_DCX_B,
        0x0C => OP_INR_C,
        0x0D => OP_DCR_C,
        0x0E => OP_MVI_C,
        0x11 => OP_LXI_D,
        0x13 => OP_INX_D,
        0x14 => OP_INR_D,
        0x15 => OP_DCR_D,
        0x16 => OP_MVI_D,
        0x17 => OP_RAL,
        0x19 => OP_DAD_D,
        0x1A => OP_LDAX,
        0x1B => OP_DCX_D,
        0x1C => OP_INR_E,
        0x1D => OP_DCR_E,
        0x1E => OP_MVI_E,
        0x1F => OP_RAR,
        0x21 => OP_LXI_H,
        0x23 => OP_INX_H,
        0x24 => OP_INR_H,
        0x25 => OP_DCR_H,
        0x26 => OP_MVI_H,
        0x27 => OP_DAA,
        0x29 => OP_DAD_H,
        0x2A => OP_LHLD,
        0x2B => OP_DCX_H,
        0x2C => OP_INR_L,
        0x2D => OP_DCR_L,
        0x2E => OP_MVI_L,
        0x2F => OP_CMA,
        0x31 => OP_LXI_SP,
        0x32 => OP_STA,
        0x33 => OP_INX_SP,
        0x34 => OP_INR_M,
        0x35 => OP_DCR_M,
        0x36 => OP_MVI_M,
        0x37 => OP_STC,
        0x39 => OP_DAD_SP,
        0x3A => OP_LDA,
        0x3B => OP_DCX_SP,
        0x3C => OP_INR_A,
        0x3D => OP_DCR_A,
        0x3E => OP_MVI_A,
        0x3F => OP_CMC,
        0x40 => OP_MOV_BB,
        0x41 => OP_MOV_BC,
        0x42 => OP_MOV_BD,
        0x43 => OP_MOV_BE,
        0x44 => OP_MOV_BH,
        0x45 => OP_MOV_BL,
        0x46 => OP_MOV_BM,
        0x47 => OP_MOV_BA,
        0x48 => OP_MOV_CB,
        0x49 => OP_MOV_CC,
        0x4A => OP_MOV_CD,
        0x4B => OP_MOV_CE,
        0x4C => OP_MOV_CH,
        0x4D => OP_MOV_CL,
        0x4E => OP_MOV_CM,
        0x4F => OP_MOV_CA,
        0x50 => OP_MOV_DB,
        0x51 => OP_MOV_DC,
        0x52 => OP_MOV_DD,
        0x53 => OP_MOV_DE,
        0x54 => OP_MOV_DH,
        0x55 => OP_MOV_DL,
        0x56 => OP_MOV_DM,
        0x57 => OP_MOV_DA,
        0x58 => OP_MOV_EB,
        0x59 => OP_MOV_EC,
        0x5A => OP_MOV_ED,
        0x5B => OP_MOV_EE,
        0x5C => OP_MOV_EH,
        0x5D => OP_MOV_EL,
        0x5E => OP_MOV_EM,
        0x5F => OP_MOV_EA,
        0x60 => OP_MOV_HB,
        0x61 => OP_MOV_HC,
        0x62 => OP_MOV_HD,
        0x63 => OP_MOV_HE,
        0x64 => OP_MOV_HH,
        0x65 => OP_MOV_HL,
        0x66 => OP_MOV_HM,
        0x67 => OP_MOV_HA,
        0x68 => OP_MOV_LB,
        0x69 => OP_MOV_LC,
        0x6A => OP_MOV_LD,
        0x6B => OP_MOV_LE,
        0x6C => OP_MOV_LH,
        0x6D => OP_MOV_LL,
        0x6E => OP_MOV_LM,
        0x6F => OP_MOV_LA,
        0x70 => OP_MOV_MB,
        0x71 => OP_MOV_MC,
        0x72 => OP_MOV_MD,
        0x73 => OP_MOV_ME,
        0x74 => OP_MOV_MH,
        0x75 => OP_MOV_ML,
        0x76 => OP_HLT,
        0x77 => OP_MOV_MA,
        0x78 => OP_MOV_AB,
        0x79 => OP_MOV_AC,
        0x7A => OP_MOV_AD,
        0x7B => OP_MOV_AE,
        0x7C => OP_MOV_AH,
        0x7D => OP_MOV_AL,
        0x7E => OP_MOV_AM,
        0x7F => OP_MOV_AA,
        0x80 => OP_ADD_B,
        0x81 => OP_ADD_C,
        0x82 => OP_ADD_D,
        0x83 => OP_ADD_E,
        0x84 => OP_ADD_H,
        0x85 => OP_ADD_L,
        0x86 => OP_ADD_M,
        0x87 => OP_ADD_A,
        0x88 => OP_ADC_B,
        0x89 => OP_ADC_C,
        0x8A => OP_ADC_D,
        0x8B => OP_ADC_E,
        0x8C => OP_ADC_H,
        0x8D => OP_ADC_L,
        0x8E => OP_ADC_M,
        0x8F => OP_ADC_A,
        0x90 => OP_SUB_B,
        0x91 => OP_SUB_C,
        0x92 => OP_SUB_D,
        0x93 => OP_SUB_E,
        0x94 => OP_SUB_H,
        0x95 => OP_SUB_L,
        0x96 => OP_SUB_M,
        0x97 => OP_SUB_A,
        0x98 => OP_SBB_B,
        0x99 => OP_SBB_C,
        0x9A => OP_SBB_D,
        0x9B => OP_SBB_E,
        0x9C => OP_SBB_H,
        0x9D => OP_SBB_L,
        0x9E => OP_SBB_M,
        0x9F => OP_SBB_A,
        0xA0 => OP_ANA_B,
        0xA1 => OP_ANA_C,
        0xA2 => OP_ANA_D,
        0xA3 => OP_ANA_E,
        0xA4 => OP_ANA_H,
        0xA5 => OP_ANA_L,
        0xA6 => OP_ANA_M,
        0xA7 => OP_ANA_A,
        0xA8 => OP_XRA_B,
        0xA9 => OP_XRA_C,
        0xAA => OP_XRA_D,
        0xAB => OP_XRA_E,
        0xAC => OP_XRA_H,
        0xAD => OP_XRA_L,
        0xAE => OP_XRA_M,
        0xAF => OP_XRA_A,
        0xB0 => OP_ORA_B,
        0xB1 => OP_ORA_C,
        0xB2 => OP_ORA_D,
        0xB3 => OP_ORA_E,
        0xB4 => OP_ORA_H,
        0xB5 => OP_ORA_L,
        0xB6 => OP_ORA_M,
        0xB7 => OP_ORA_A,
        0xB8 => OP_CMP_B,
        0xB9 => OP_CMP_C,
        0xBA => OP_CMP_D,
        0xBB => OP_CMP_E,
        0xBC => OP_CMP_H,
        0xBD => OP_CMP_L,
        0xBE => OP_CMP_M,
        0xBF => OP_CMP_A,
        0xC0 => OP_RNZ,
        0xC1 => OP_POP_B,
        0xC2 => OP_JNZ,
        0xC3 => OP_JMP_16,
        0xC4 => OP_CNZ,
        0xC5 => OP_PUSH_B,
        0xC6 => OP_ADI,
        0xC7 => OP_RST_0,
        0xC8 => OP_RC,
        0xC9 => OP_RET,
        0xCA => OP_JZ,
        0xCC => OP_CZ,
        0xCD => OP_CALL,
        0xCE => OP_ACI,
        0xCF => OP_RST_1,
        0xD0 => OP_RNC,
        0xD1 => OP_POP_D,
        0xD2 => OP_JNC,
        0xD3 => OP_OUT,
        0xD4 => OP_CNC,
        0xD5 => OP_PUSH_D,
        0xD7 => OP_RST_2,
        0xDC => OP_CC,
        0xDF => OP_RST_3,
        0xE0 => OP_RPO,
        0xE1 => OP_POP_H,
        0xE4 => OP_CPO,
        0xE5 => OP_PUSH_H,
        0xE7 => OP_RST_4,
        0xE8 => OP_RPE,
        0xEB => OP_XCHG,
        0xEC => OP_CPE,
        0xEF => OP_RST_5,
        0xF1 => OP_POP_PSW,
        0xF0 => OP_RP,
        0xF4 => OP_CP,
        0xF5 => OP_PUSH_PSW,
        0xF7 => OP_RST_6,
        0xF8 => OP_RM,
        0xFA => OP_JM_16,
        0xFE => OP_CPI,
        0xFF => OP_RST_7,

        _ => OP_UNK, // UNK
    }
}
